/*Задача 1Напишите функцию, которая в зависимости от переданныхв нее целочисленных аргументов "количество дней", будет выводитьслово "день" в нужно форме ("если передали - 1, то 1 день",    "если передали - 3, то 3 дня" и т.д).*/function days(a) {    if (a === 1 || a === 21 || a === 31 || a === 41 || a === 51 || a === 61 || a === 71 || a === 81 || a === 91 || a === 101) {        return a + ' день';    } else if (1 < a && a < 5 || 21 < a && a < 25 || 31 < a && a < 35 || 41 < a && a < 45 || 51 < a && a < 55 || 61 < a && a < 65 || 71 < a && a < 75 || 81 < a && a < 85 || 91 < a && a < 95) {        return a + ' дня';    } else {        return a + ' дней';    }}console.log(days(21));/*Задача 2 (не обязательная)Напиши функцию map(fn, array), которая принимает на вход функцию и массив, и обрабатывает каждый элемент массива переданной функцией (fn), возвращая новый массив.    Функция не должна изменять переданный ей массив.    Если аргументы не заданы – выводить сообщение об ошибкеПример:    function square(x) { return x * x; } // возведение в квадратconsole.log( map(square, [1, 2, 3, 4]) ); // [1, 4, 9, 16]console.log( map(square, []) ); // []*/let arr = [1, 4];function plus2(x) {    return x + 2;}/*for (let i = 0; i<arr.length; i++) {    arr [i] = plus2(arr[i]);*/function f(func, array) {    for (let i = 1; i < arr.length; i++) {    }    return arr;}console.log(f(plus2), arr);/*Задача 3Написать функцию клонирующую (создающую копию) массива.*/function clone(copy) {    var original = ["1", "2", "55", 'морковка'];    var clon = original.slice();    console.log(clon);}/*    Задача 4Написать функцию подсчета суммы от n до m (задача на рекурсию).Попробуйте сделать и циклом и рекурсией.*/function recurs(n, m) {    var sum = 0;    for (let i = n; i <= m; i++) {        sum += i;    }    console.log(sum);}recurs(5, 10);/*   Задача 5Написать функцию, которая возвращает новую функцию,   которая увеличивает/уменьшает переданное число на указанный при карировании шаг (задача на замыкание).Карирование в javascript - прием, позволяющий преобразовать функцию так, на выходе образуется функция, обладающая возможностью частичного применения...*/